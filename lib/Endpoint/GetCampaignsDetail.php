<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Endpoint;

class GetCampaignsDetail extends \Braze\Runtime\Client\BaseEndpoint implements \Braze\Runtime\Client\Endpoint
{
    use \Braze\Runtime\Client\EndpointTrait;

    /**
     * > Use this endpoint to retrieve relevant information on a specified campaign, which can be identified by the `campaign_id`.
     *
     * To use this endpoint, you’ll need to generate an API key with the `campaign.details` permission.
     *
     * If you want to retrieve Canvas data, refer to the [Canvas Details](https://www.braze.com/docs/api/endpoints/export/canvas/get_canvas_details/) endpoint.
     *
     * Note: If you are using our [older navigation](https://www.braze.com/docs/navigation), `campaign_id` can be found at **Developer Console** > **API Settings**
     *
     * ## Rate limit
     *
     * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
     *
     * ## Responses
     *
     * ``` json
     * Content-Type: application/json
     * Authorization: Bearer YOUR-REST-API-KEY
     * {
     * "message": (required, string) the status of the export, returns 'success' when completed without errors,
     * "created_at" : (string) the date created as ISO 8601 date,
     * "updated_at" : (string) the date last updated as ISO 8601 date,
     * "archived": (boolean) whether this campaign is archived,
     * "draft": (boolean) whether this campaign is a draft,
     * "name" : (string) the campaign name,
     * "description" : (string) the campaign description,
     * "schedule_type" : (string) the type of scheduling action,
     * "channels" : (array) the list of channels to send via,
     * "first_sent" : (string) the date and hour of first sent as ISO 8601 date,
     * "last_sent" : (string) the date and hour of last sent as ISO 8601 date,
     * "tags" : (array) the tag names associated with the campaign,
     * "messages": {
     * "message_variation_id": (string) { // <=This is the actual id
     * "channel": (string) the channel type of the message, must be either email, ios_push, webhook, content_card, in-app_message, or sms,
     * "name": (string) the name of the message in the dashboard (eg., "Variation 1")
     * ... channel-specific fields for this message, see the following messages section ...
     * }
     * },
     * "conversion_behaviors": (array) the conversion event behaviors assigned to the campaign, see the following conversions behavior section.
     * }
     *
     * ```
     *
     * ### Messages
     *
     * The `messages` response will contain information about each message. The following includes example message responses for each channel:
     *
     * #### Push channels
     *
     * ``` json
     * {
     * "channel": (string) description of the channel, such as "ios_push" or "android_push"
     * "alert": (string) alert body text,
     * "extras": (hash) any key value pairs provided
     * }
     *
     * ```
     *
     * #### Email channel
     *
     * ``` json
     * {
     * "channel": "email",
     * "subject": (string) subject,
     * "body": (string) HTML body,
     * "from": (string) from address and display name,
     * "reply_to": (string) reply-to for message, if different than "from" address,
     * "title": (string) name of the email,
     * "extras": (hash) any key value pairs provided
     * }
     *
     * ```
     *
     * #### In-app message channel
     *
     * ``` json
     * {
     * "type": (string) description of in-app message type, such as "survey",
     * "data": {
     * "pages": [
     * {
     * "header":
     * {
     * "text":(string) display text for the header of the survey,
     * }
     * "choices": [
     * {
     * "choice_id": (string) choice identifier,
     * "text": (string) display text,
     * "custom_attribute_key": (string) custom attribute key,
     * "custom_attribute_value": (sting) custom attribute value,
     * "deleted": (boolean) deleted from live campaign,
     * },
     * ...
     * ]
     * }
     * ]
     * }
     * }
     *
     * ```
     *
     * #### Content Card channel
     *
     * ``` json
     * {
     * "channel": "content_cards",
     * "name": (string) name of variant,
     * "extras": (hash) any key value pairs provided; only present if at least one key-value pair has been set
     * }
     *
     * ```
     *
     * #### Webhook channel
     *
     * ``` json
     * {
     * "channel": "webhook",
     * "url": (string) url for webhook,
     * "body": (string) payload body,
     * "type": (string) body content type,
     * "headers": (hash) specified request headers,
     * "method": (string) HTTP method (e.g., "POST" or "GET"),
     * }
     *
     * ```
     *
     * #### SMS channel
     *
     * ``` json
     * {
     * "channel": "sms",
     * "body": (string) payload body,
     * "from": (string) list of numbers associated with the subscription group,
     * "subscription_group_id": (string) API id of the subscription group targeted in the SMS message
     * }
     *
     * ```
     *
     * #### Control Messages
     *
     * ``` json
     * {
     * "channel": (string) description of the channel that the control is for,
     * "type": "control"
     * }
     *
     * ```
     *
     * ### Conversion Behaviors
     *
     * The `conversion_behaviors` array will contain information about each conversion event behavior set for the campaign. These behaviors are in order as set by the campaign. For example, Conversion Event A will be the first item in the array, Conversion Event B will be second, etc. The following lists example conversion event behavior responses:
     *
     * #### Clicks email
     *
     * ``` json
     * {
     * "type": "Clicks Email",
     * "window": (integer) number of seconds during which the user can convert on this event, i.e. - 86400, which is 24 hours
     * }
     *
     * ```
     *
     * #### Opens email
     *
     * ``` json
     * {
     * "type": "Opens Email",
     * "window": (integer) number of seconds during which the user can convert on this event, i.e. - 86400, which is 24 hours
     * }
     *
     * ```
     *
     * #### Makes purchase (any purchase)
     *
     * ``` json
     * {
     * "type": "Makes Any Purchase",
     * "window": (integer) number of seconds during which the user can convert on this event, i.e. - 86400, which is 24 hours
     * }
     *
     * ```
     *
     * #### Makes purchase (specific product)
     *
     * ``` json
     * {
     * "type": "Makes Specific Purchase",
     * "window": (integer) number of seconds during which the user can convert on this event, i.e. - 86400, which is 24 hours,
     * "product": (string) name of the product, i.e. - "Feline Body Armor"
     * }
     *
     * ```
     *
     * #### Performs custom event
     *
     * ``` json
     * {
     * "type": "Performs Custom Event",
     * "window": (integer) number of seconds during which the user can convert on this event, i.e. - 86400, which is 24 hours,
     * "custom_event_name": (string) name of the event, i.e. - "Used Feline Body Armor"
     * }
     *
     * ```
     *
     * #### Upgrades app
     *
     * ``` json
     * {
     * "type": "Upgrades App",
     * "window": (integer) number of seconds during which the user can convert on this event, i.e. - 86400, which is 24 hours,
     * "app_ids": (array|null) array of app ids, i.e. - ["12345", "67890"], or `null` if "Track sessions for any app" is selected in the UI
     * }
     *
     * ```
     *
     * #### Uses app
     *
     * ``` json
     * {
     * "type": "Starts Session",
     * "window": (integer) number of seconds during which the user can convert on this event, i.e. - 86400, which is 24 hours,
     * "app_ids": (array|null) array of app ids, i.e. - ["12345", "67890"], or `null` if "Track sessions for any app" is selected in the UI
     * }
     *
     * ```
     *
     * > **Tip:** For help with CSV and API exports, visit [Export troubleshooting](https://www.braze.com/docs/user_guide/data_and_analytics/export_braze_data/export_troubleshooting/).
     *
     * @param array $queryParameters {
     *
     * @var string $campaign_id (Required) String
     *
     * See [campaign API identifier](https://www.braze.com/docs/api/identifier_types/).
     *
     * The `campaign_id` for API campaigns can be found on the **Settings > Setup and Testing > API Keys** and the campaign details page within your dashboard, or you can use the [Campaign List Endpoint](https://www.braze.com/docs/api/endpoints/export/campaigns/get_campaign_analytics/#campaign-list-endpoint).
     * }
     *
     * @param array $headerParameters {
     *
     * @var string $Authorization
     *             }
     */
    public function __construct(array $queryParameters = [], array $headerParameters = [])
    {
        $this->queryParameters = $queryParameters;
        $this->headerParameters = $headerParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return '/campaigns/details';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['campaign_id']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('campaign_id', ['string']);

        return $optionsResolver;
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['Authorization']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('Authorization', ['string']);

        return $optionsResolver;
    }

    /**
     * @return null
     *
     * @throws \Braze\Exception\GetCampaignsDetailBadRequestException
     * @throws \Braze\Exception\GetCampaignsDetailUnauthorizedException
     * @throws \Braze\Exception\GetCampaignsDetailForbiddenException
     * @throws \Braze\Exception\GetCampaignsDetailNotFoundException
     * @throws \Braze\Exception\GetCampaignsDetailTooManyRequestsException
     * @throws \Braze\Exception\GetCampaignsDetailInternalServerErrorException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return json_decode($body);
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetCampaignsDetailBadRequestException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (401 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetCampaignsDetailUnauthorizedException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetCampaignsDetailForbiddenException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetCampaignsDetailNotFoundException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (429 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetCampaignsDetailTooManyRequestsException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetCampaignsDetailInternalServerErrorException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['BearerAuth'];
    }
}
