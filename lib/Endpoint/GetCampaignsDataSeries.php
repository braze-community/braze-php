<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Endpoint;

class GetCampaignsDataSeries extends \Braze\Runtime\Client\BaseEndpoint implements \Braze\Runtime\Client\Endpoint
{
    use \Braze\Runtime\Client\EndpointTrait;

    /**
     * > Use this endpoint to retrieve a daily series of various stats for a campaign over time.
     *
     * Data returned includes how many messages were sent, opened, clicked, or converted by messaging channel.
     *
     * To use this endpoint, you’ll need to generate an API key with the `campaigns.data_series` permission.
     *
     * Note: If you are using our [older navigation](https://www.braze.com/docs/navigation), `campaign_id` can be found at **Developer Console > API Settings**.
     *
     * ## Rate limit
     *
     * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
     *
     * ## Responses
     *
     * ### Multichannel response
     *
     * ``` json
     * Content-Type: application/json
     * Authorization: Bearer YOUR-REST-API-KEY
     * {
     * "message": (required, string) the status of the export, returns 'success' when completed without errors,
     * "data" : [
     * {
     * "time" : (string) date as ISO 8601 date,
     * "messages" : {
     * "ios_push" : [
     * {
     * "variation_name": "iOS_Push",
     * "sent" : (int),
     * "direct_opens" : (int),
     * "total_opens" : (int),
     * "bounces" : (int),
     * "body_clicks" : (int)
     * "revenue": 0,
     * "unique_recipients": 1,
     * "conversions": 0,
     * "conversions_by_send_time": 0,
     * "conversions1": 0,
     * "conversions1_by_send_time": 0,
     * "conversions2": 0,
     * "conversions2_by_send_time": 0,
     * "conversions3": 0,
     * "conversions3_by_send_time": 0,
     * "carousel_slide_[NUM]_[TITLE]_click": (optional, int),
     * "notif_button_[NUM]_[TITLE]_click": (optional, int)
     * }
     * ],
     * "android_push" : [
     * {
     * "sent" : (int),
     * "direct_opens" : (int),
     * "total_opens" : (int),
     * "bounces" : (int),
     * "body_clicks" : (int)
     * }
     * ],
     * "webhook": [
     * {
     * "sent": (int),
     * "errors": (int)
     * }
     * ],
     * "email" : [
     * {
     * "sent": (int),
     * "opens": (int),
     * "unique_opens": (int),
     * "clicks": (int),
     * "unique_clicks": (int),
     * "unsubscribes": (int),
     * "bounces": (int),
     * "delivered": (int),
     * "reported_spam": (int)
     * }
     * ],
     * "sms" : [
     * {
     * "sent": (int),
     * "delivered": (int),
     * "undelivered": (int),
     * "delivery_failed": (int)
     * }
     * ]
     * },
     * "conversions_by_send_time": (optional, int),
     * "conversions1_by_send_time": (optional, int),
     * "conversions2_by_send_time": (optional, int),
     * "conversions3_by_send_time": (optional, int),
     * "conversions": (int),
     * "conversions1": (optional, int),
     * "conversions2": (optional, int),
     * "conversions3": (optional, int),
     * "unique_recipients": (int),
     * "revenue": (optional, float)
     * },
     * ...
     * ],
     * ...
     * }
     *
     * ```
     *
     * ### Multivariate response
     *
     * ``` json
     * Content-Type: application/json
     * Authorization: Bearer YOUR-REST-API-KEY
     * {
     * "data" : [
     * {
     * "time" : (string) date as ISO 8601 date,
     * "conversions" : (int),
     * "revenue": (float),
     * "conversions_by_send_time": (int),
     * "messages" : {
     * "trigger_in_app_message": [{
     * "variation_name": (optional, string),
     * "impressions": (int),
     * "clicks": (int),
     * "first_button_clicks": (int),
     * "second_button_clicks": (int),
     * "revenue": (optional, float),,
     * "unique_recipients": (int),
     * "conversions": (optional, int),
     * "conversions_by_send_time": (optional, int),
     * "conversions1": (optional, int),
     * "conversions1_by_send_time": (optional, int),
     * "conversions2": (optional, int),
     * "conversions2_by_send_time": (optional, int),
     * "conversions3": (optional, int),
     * "conversions3_by_send_time": (optional, int)
     * }, {
     * "variation_name": (optional, string),
     * "impressions": (int),
     * "clicks": (int),
     * "first_button_clicks": (int),
     * "second_button_clicks": (int),
     * "revenue": (optional, float),,
     * "unique_recipients": (int),
     * "conversions": (optional, int),
     * "conversions_by_send_time": (optional, int),
     * "conversions1": (optional, int),
     * "conversions1_by_send_time": (optional, int),
     * "conversions2": (optional, int),
     * "conversions2_by_send_time": (optional, int),
     * "conversions3": (optional, int).
     * "conversions3_by_send_time": (optional, int)
     * }, {
     * "variation_name": (optional, string),
     * "revenue": (optional, float),,
     * "unique_recipients": (int),
     * "conversions": (optional, int),
     * "conversions_by_send_time": (optional, int),
     * "conversions1": (optional, int),
     * "conversions1_by_send_time": (optional, int),
     * "conversions2": (optional, int),
     * "conversions2_by_send_time": (optional, int),
     * "conversions3": (optional, int),
     * "conversions3_by_send_time": (optional, int),
     * "enrolled": (optional, int)
     * }]
     * },
     * "conversions_by_send_time": (optional, int),
     * "conversions1_by_send_time": (optional, int),
     * "conversions2_by_send_time": (optional, int),
     * "conversions3_by_send_time": (optional, int),
     * "conversions": (optional, int,
     * "conversions1": (optional, int),
     * "conversions2": (optional, int),
     * "conversions3": (optional, int),
     * "unique_recipients": (int),
     * "revenue": (optional, float)
     * }],
     * ...
     * }
     *
     * ```
     *
     * Possible message types are `email`, `in_app_message`, `webhook`, `android_push`, ios_push, `kindle_push`, `web_push`. All push message types will have the same statistics shown for `android_push`.
     *
     * > **Tip:** For help with CSV and API exports, visit [Export troubleshooting](https://www.braze.com/docs/user_guide/data_and_analytics/export_braze_data/export_troubleshooting/).
     *
     * @param array $queryParameters {
     *
     * @var string $campaign_id (Required) String
     *
     * See [campaign API identifier](https://www.braze.com/docs/api/identifier_types/).
     *
     * The `campaign_id` for API campaigns can be found at **Settings > Setup and Testing > API Keys** and the **Campaign Details** page within your dashboard, or you can use the [List campaigns endpoint](https://www.braze.com/docs/api/endpoints/export/campaigns/get_campaigns/).
     * @var int $length (Required) Integer
     *
     * Max number of days before `ending_at` to include in the returned series. Must be between 1 and 100 (inclusive).
     * @var string $ending_at (Optional) Datetime ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string)
     *
     * Date on which the data series should end. Defaults to time of the request.
     * }
     *
     * @param array $headerParameters {
     *
     * @var string $Authorization
     *             }
     */
    public function __construct(array $queryParameters = [], array $headerParameters = [])
    {
        $this->queryParameters = $queryParameters;
        $this->headerParameters = $headerParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return '/campaigns/data_series';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['campaign_id', 'length', 'ending_at']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('campaign_id', ['string']);
        $optionsResolver->addAllowedTypes('length', ['int']);
        $optionsResolver->addAllowedTypes('ending_at', ['string']);

        return $optionsResolver;
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['Authorization']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('Authorization', ['string']);

        return $optionsResolver;
    }

    /**
     * @return null
     *
     * @throws \Braze\Exception\GetCampaignsDataSeriesBadRequestException
     * @throws \Braze\Exception\GetCampaignsDataSeriesUnauthorizedException
     * @throws \Braze\Exception\GetCampaignsDataSeriesForbiddenException
     * @throws \Braze\Exception\GetCampaignsDataSeriesNotFoundException
     * @throws \Braze\Exception\GetCampaignsDataSeriesTooManyRequestsException
     * @throws \Braze\Exception\GetCampaignsDataSeriesInternalServerErrorException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return json_decode($body);
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetCampaignsDataSeriesBadRequestException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (401 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetCampaignsDataSeriesUnauthorizedException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetCampaignsDataSeriesForbiddenException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetCampaignsDataSeriesNotFoundException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (429 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetCampaignsDataSeriesTooManyRequestsException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetCampaignsDataSeriesInternalServerErrorException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['BearerAuth'];
    }
}
