<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Endpoint;

class GetSendsDataSeries extends \Braze\Runtime\Client\BaseEndpoint implements \Braze\Runtime\Client\Endpoint
{
    use \Braze\Runtime\Client\EndpointTrait;

    /**
     * > Use this endpoint to retrieve a daily series of various stats for a tracked `send_id`.
     *
     * Braze stores send analytics for 14 days after the send.
     *
     * Campaign conversions will be attributed towards the most recent send id that a given user has received from the campaign.
     *
     * To use this endpoint, you’ll need to generate an API key with the `sends.data_series` permission.
     *
     * ## Rate limit
     *
     * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
     *
     * ## Response
     *
     * ### Send analytics endpoint API response
     *
     * ``` json
     * Content-Type: application/json
     * Authorization: Bearer YOUR-REST-API-KEY
     * {
     * "variation_name": (string) variation name,
     * "sent": (int) the number of sends,
     * "delivered": (int) the number of messages successfully delivered,
     * "undelivered": (int) the number of undelivered,
     * "delivery_failed": (int) the number of rejected,
     * "direct_opens": (int) the number of direct opens,
     * "total_opens": (int) the number of total opens,
     * "bounces": (int) the number of bounces,
     * "body_clicks": (int) the number of body clicks,
     * "revenue": (float) the number of dollars of revenue (USD),
     * "unique_recipients": (int) the number of unique recipients,
     * "conversions": (int) the number of conversions,
     * "conversions_by_send_time": (int) the number of conversions,
     * "conversions1": (int, optional) the number of conversions for the second conversion event,
     * "conversions1_by_send_time": (int, optional) the number of conversions for the second conversion event by send time,
     * "conversions2": (int, optional) the number of conversions for the third conversion event,
     * "conversions2_by_send_time": (int, optional) the number of conversions for the third conversion event by send time,
     * "conversions3": (int, optional) the number of conversions for the fourth conversion event,
     * "conversions3_by_send_time": (int, optional) the number of conversions for the fourth conversion event by send time
     * }
     * ]
     * },
     * "conversions_by_send_time": 0,
     * "conversions1_by_send_time": 0,
     * "conversions2_by_send_time": 0,
     * "conversions3_by_send_time": 0,
     * "conversions": 0,
     * "conversions1": 0,
     * "conversions2": 0,
     * "conversions3": 0,
     * "unique_recipients": 1,
     * "revenue": 0
     * }
     * ],
     * "message": "success"
     * }
     *
     * ```
     *
     * > **Tip:** For help with CSV and API exports, visit [Export troubleshooting](https://www.braze.com/docs/user_guide/data_and_analytics/export_braze_data/export_troubleshooting/).
     *
     * @param array $queryParameters {
     *
     * @var string (Required) String
     *
     * See [Campaign API identifier](https://www.braze.com/docs/api/identifier_types/).
     * @var string (Required) String
     *
     * See [Send API identifier](https://www.braze.com/docs/api/identifier_types/).
     * @var int (Required) Integer
     *
     * Max number of days before `ending_at` to include in the returned series. Must be between 1 and 100 (inclusive).
     * @var string (Optional) Datetime ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string)
     *
     * Date on which the data series should end. Defaults to time of the request.
     * }
     *
     * @param array $headerParameters {
     *
     * @var string
     *             }
     */
    public function __construct(array $queryParameters = [], array $headerParameters = [])
    {
        $this->queryParameters = $queryParameters;
        $this->headerParameters = $headerParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return '/sends/data_series';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['campaign_id', 'send_id', 'length', 'ending_at']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('campaign_id', ['string']);
        $optionsResolver->addAllowedTypes('send_id', ['string']);
        $optionsResolver->addAllowedTypes('length', ['int']);
        $optionsResolver->addAllowedTypes('ending_at', ['string']);

        return $optionsResolver;
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['Authorization']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('Authorization', ['string']);

        return $optionsResolver;
    }

    /**
     * @return null
     *
     * @throws \Braze\Exception\GetSendsDataSeriesBadRequestException
     * @throws \Braze\Exception\GetSendsDataSeriesUnauthorizedException
     * @throws \Braze\Exception\GetSendsDataSeriesForbiddenException
     * @throws \Braze\Exception\GetSendsDataSeriesNotFoundException
     * @throws \Braze\Exception\GetSendsDataSeriesTooManyRequestsException
     * @throws \Braze\Exception\GetSendsDataSeriesInternalServerErrorException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return json_decode($body);
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSendsDataSeriesBadRequestException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (401 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSendsDataSeriesUnauthorizedException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSendsDataSeriesForbiddenException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSendsDataSeriesNotFoundException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (429 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSendsDataSeriesTooManyRequestsException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSendsDataSeriesInternalServerErrorException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['BearerAuth'];
    }
}
