<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Endpoint;

class GetTemplatesEmailInfo extends \Braze\Runtime\Client\BaseEndpoint implements \Braze\Runtime\Client\Endpoint
{
    use \Braze\Runtime\Client\EndpointTrait;

    /**
     * > Use this endpoint to get information on your email templates.
     *
     **Important:** Templates built using the drag-and-drop editor are not accepted.
     *
     * ## Prerequisites
     *
     * To use this endpoint, you’ll need an [API key](https://www.braze.com/docs/api/api_key/) with the `templates.email.info` permission.
     *
     * ## Rate limit
     *
     * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
     *
     * ## Request parameters
     *
     * | Parameter | Required | Data Type | Description |
     * | --- | --- | --- | --- |
     * | `email_template_id` | Required | String | See [email template API identifier](https://www.braze.com/docs/api/identifier_types/). |
     *
     * ## Example request
     *
     * ``` json
     * curl --location -g --request GET 'https://rest.iad-01.braze.com/templates/email/info?email_template_id={{email_template_id}}' \
     * --header 'Authorization: Bearer YOUR_REST_API_KEY'
     *
     * ```
     *
     * ## Response
     *
     * ``` json
     * Content-Type: application/json
     * Authorization: Bearer YOUR_REST_API_KEY
     * {
     * "email_template_id": (string) Your email template's API Identifier,
     * "template_name": (string) The name of your email template,
     * "description": (string) The email template description,
     * "subject": (string) The email template subject line,
     * "preheader": (optional, string) The email preheader used to generate previews in some clients),
     * "body": (optional, string) The email template body that may include HTML,
     * "plaintext_body": (optional, string) A plaintext version of the email template body,
     * "should_inline_css": (optional, boolean) Whether there is inline CSS in the body of the template - defaults to the css inlining value for the workspace,
     * "tags": (string) Tag names,
     * "created_at": (string) The time the email was created at in ISO 8601,
     * "updated_at": (string) The time the email was updated in ISO 8601
     * }
     *
     * ```
     *
     * Images in this response will show in the `body` variable as HTML.
     *
     * @param array $queryParameters {
     *
     * @var string $email_template_id (Required) String
     *
     * See [email template's API identifier](https://www.braze.com/docs/api/identifier_types/).
     * }
     *
     * @param array $headerParameters {
     *
     * @var string $Authorization
     *             }
     */
    public function __construct(array $queryParameters = [], array $headerParameters = [])
    {
        $this->queryParameters = $queryParameters;
        $this->headerParameters = $headerParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return '/templates/email/info';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['email_template_id']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('email_template_id', ['string']);

        return $optionsResolver;
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['Authorization']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('Authorization', ['string']);

        return $optionsResolver;
    }

    /**
     * @return null
     *
     * @throws \Braze\Exception\GetTemplatesEmailInfoBadRequestException
     * @throws \Braze\Exception\GetTemplatesEmailInfoUnauthorizedException
     * @throws \Braze\Exception\GetTemplatesEmailInfoForbiddenException
     * @throws \Braze\Exception\GetTemplatesEmailInfoNotFoundException
     * @throws \Braze\Exception\GetTemplatesEmailInfoTooManyRequestsException
     * @throws \Braze\Exception\GetTemplatesEmailInfoInternalServerErrorException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return json_decode($body);
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetTemplatesEmailInfoBadRequestException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (401 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetTemplatesEmailInfoUnauthorizedException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetTemplatesEmailInfoForbiddenException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetTemplatesEmailInfoNotFoundException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (429 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetTemplatesEmailInfoTooManyRequestsException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetTemplatesEmailInfoInternalServerErrorException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['BearerAuth'];
    }
}
