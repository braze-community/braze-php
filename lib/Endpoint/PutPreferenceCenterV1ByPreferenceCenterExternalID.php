<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Endpoint;

class PutPreferenceCenterV1ByPreferenceCenterExternalID extends \Braze\Runtime\Client\BaseEndpoint implements \Braze\Runtime\Client\Endpoint
{
    use \Braze\Runtime\Client\EndpointTrait;
    protected $PreferenceCenterExternalID;

    /**
     * > Use this endpoint to update a preference center.
     *
     * To use this endpoint, you’ll need to generate an API key with the `preference_center.update` permission.
     *
     * ## Rate limit
     *
     * This endpoint has a rate limit of 10 requests per minute, per workspace.
     *
     * ## Path parameters
     *
     * | Parameter | Required | Data Type | Description |
     * | --- | --- | --- | --- |
     * | `preferenceCenterExternalID` | Required | String | The ID for your preference center. |
     *
     * ## Request parameters
     *
     * | Parameter | Required | Data Type | Description |
     * | --- | --- | --- | --- |
     * | `preference_center_page_html` | Required | String | The HTML for the preference center page. |
     * | `preference_center_title` | Optional | String | The title for the preference center and confirmation pages. If a title is not specified, the title of the pages will default to "Preference Center". |
     * | `confirmation_page_html` | Required | String | The HTML for the confirmation page. |
     * | `state` | Optional | String | Choose `active` or `draft`. |
     * | `options` | Optional | Object | Attributes: `meta-viewport-content`. When present, a `viewport` meta tag will be added to the page with `content=` . |
     *
     * ## Example request
     *
     * ```
     * curl --location --request POST 'https://rest.iad-01.braze.com/preference_center/v1/{preferenceCenterExternalId}' \
     * --header 'Content-Type: application/json' \
     * --header 'Authorization: Bearer YOUR-API-KEY-HERE' \
     * --data-raw '{
     * "name": "Example",
     * "preference_center_title": "Example Preference Center Title",
     * "preference_center_page_html": "HTML for preference center here",
     * "confirmation_page_html": "HTML here with a message to users here",
     * "state": "active"
     * }
     * '
     *
     * ```
     *
     * ## Example response
     *
     * ```
     * {
     * "preference_center_api_id": "8efc52aa-935e-42b7-bd6b-98f43bb9b0f1",
     * "created_at": "2022-09-22T18:28:07Z",
     * "updated_at": "2022-09-22T18:32:07Z",
     * "message": "success"
     * }
     *
     * ```
     *
     * @param array $headerParameters {
     *
     * @var string-Type
     * @var string
     *                  }
     */
    public function __construct(string $preferenceCenterExternalID, ?\Braze\Model\PreferenceCenterV1PreferenceCenterExternalIDPutBody $requestBody = null, array $headerParameters = [])
    {
        $this->PreferenceCenterExternalID = $preferenceCenterExternalID;
        $this->body = $requestBody;
        $this->headerParameters = $headerParameters;
    }

    public function getMethod(): string
    {
        return 'PUT';
    }

    public function getUri(): string
    {
        return str_replace(['{PreferenceCenterExternalID}'], [$this->PreferenceCenterExternalID], '/preference_center/v1/{PreferenceCenterExternalID}');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        if ($this->body instanceof \Braze\Model\PreferenceCenterV1PreferenceCenterExternalIDPutBody) {
            return [['Content-Type' => ['application/json']], $serializer->serialize($this->body, 'json')];
        }

        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['Content-Type', 'Authorization']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('Content-Type', ['string']);
        $optionsResolver->addAllowedTypes('Authorization', ['string']);

        return $optionsResolver;
    }

    /**
     * @return null
     *
     * @throws \Braze\Exception\PutPreferenceCenterV1ByPreferenceCenterExternalIDBadRequestException
     * @throws \Braze\Exception\PutPreferenceCenterV1ByPreferenceCenterExternalIDUnauthorizedException
     * @throws \Braze\Exception\PutPreferenceCenterV1ByPreferenceCenterExternalIDForbiddenException
     * @throws \Braze\Exception\PutPreferenceCenterV1ByPreferenceCenterExternalIDNotFoundException
     * @throws \Braze\Exception\PutPreferenceCenterV1ByPreferenceCenterExternalIDTooManyRequestsException
     * @throws \Braze\Exception\PutPreferenceCenterV1ByPreferenceCenterExternalIDInternalServerErrorException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return json_decode($body);
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PutPreferenceCenterV1ByPreferenceCenterExternalIDBadRequestException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (401 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PutPreferenceCenterV1ByPreferenceCenterExternalIDUnauthorizedException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PutPreferenceCenterV1ByPreferenceCenterExternalIDForbiddenException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PutPreferenceCenterV1ByPreferenceCenterExternalIDNotFoundException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (429 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PutPreferenceCenterV1ByPreferenceCenterExternalIDTooManyRequestsException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PutPreferenceCenterV1ByPreferenceCenterExternalIDInternalServerErrorException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['BearerAuth'];
    }
}
