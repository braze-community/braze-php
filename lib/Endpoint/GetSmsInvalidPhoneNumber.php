<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Endpoint;

class GetSmsInvalidPhoneNumber extends \Braze\Runtime\Client\BaseEndpoint implements \Braze\Runtime\Client\Endpoint
{
    use \Braze\Runtime\Client\EndpointTrait;

    /**
     * > Use this endpoint to pull a list of phone numbers that have been deemed “invalid” within a certain time frame.
     *
     * To use this endpoint, you’ll need to generate an API key with the `sms.invalid_phone_numbers` permission.
     *
     * - If you provide a `start_date`, an `end_date`, and `phone_numbers`, we prioritize the given phone numbers and disregard the date range.
     * - If your date range has more than the `limit` number of invalid phone numbers, you will need to make multiple API calls with increasing the `offset` each time until a call returns either fewer than `limit` or zero results.
     *
     *
     * ## Rate limit
     *
     * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
     *
     * ## Response
     *
     * Entries are listed in descending order.
     *
     * ``` json
     * Content-Type: application/json
     * Authorization: Bearer YOUR-REST-API-KEY
     * {
     * "sms": [
     * {
     * "phone": "12345678900",
     * "invalid_detected_at": "2016-08-25 15:24:32 +0000"
     * },
     * {
     * "phone": "12345678901",
     * "invalid_detected_at": "2016-08-24 17:41:58 +0000"
     * },
     * {
     * "phone": "12345678902",
     * "invalid_detected_at": "2016-08-24 12:01:13 +0000"
     * }
     * ],
     * "message": "success"
     * }
     *
     * ```
     *
     * @param array $queryParameters {
     *
     * @var string $start_date (Optional*) String in YYYY-MM-DD format
     *             Start date of the range to retrieve invalid phone numbers, must be earlier than `end_date`. This is treated as midnight in UTC time by the API.
     * @var string $end_date (Optional*) String in YYYY-MM-DD format
     *             End date of the range to retrieve invalid phone numbers. This is treated as midnight in UTC time by the API.
     * @var int    $limit (Optional) Integer
     *             Optional field to limit the number of results returned. Defaults to 100, maximum is 500.
     * @var int    $offset (Optional) Integer
     *             Optional beginning point in the list to retrieve from
     * @var int    $phone_numbers (Optional*) Array of Strings in e.164 format
     *             If provided, we will return the phone number if it has been found to be invalid.
     *
     * }
     *
     * @param array $headerParameters {
     *
     * @var string $Authorization
     *             }
     */
    public function __construct(array $queryParameters = [], array $headerParameters = [])
    {
        $this->queryParameters = $queryParameters;
        $this->headerParameters = $headerParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return '/sms/invalid_phone_numbers';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['start_date', 'end_date', 'limit', 'offset', 'phone_numbers']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('start_date', ['string']);
        $optionsResolver->addAllowedTypes('end_date', ['string']);
        $optionsResolver->addAllowedTypes('limit', ['int']);
        $optionsResolver->addAllowedTypes('offset', ['int']);
        $optionsResolver->addAllowedTypes('phone_numbers', ['int']);

        return $optionsResolver;
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['Authorization']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('Authorization', ['string']);

        return $optionsResolver;
    }

    /**
     * @return null
     *
     * @throws \Braze\Exception\GetSmsInvalidPhoneNumberBadRequestException
     * @throws \Braze\Exception\GetSmsInvalidPhoneNumberUnauthorizedException
     * @throws \Braze\Exception\GetSmsInvalidPhoneNumberForbiddenException
     * @throws \Braze\Exception\GetSmsInvalidPhoneNumberNotFoundException
     * @throws \Braze\Exception\GetSmsInvalidPhoneNumberTooManyRequestsException
     * @throws \Braze\Exception\GetSmsInvalidPhoneNumberInternalServerErrorException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return json_decode($body);
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSmsInvalidPhoneNumberBadRequestException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (401 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSmsInvalidPhoneNumberUnauthorizedException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSmsInvalidPhoneNumberForbiddenException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSmsInvalidPhoneNumberNotFoundException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (429 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSmsInvalidPhoneNumberTooManyRequestsException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSmsInvalidPhoneNumberInternalServerErrorException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['BearerAuth'];
    }
}
