<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Endpoint;

class GetSmsInvalidPhoneNumber extends \Braze\Runtime\Client\BaseEndpoint implements \Braze\Runtime\Client\Endpoint
{
    use \Braze\Runtime\Client\EndpointTrait;

    /**
     * > Use this endpoint to pull a list of phone numbers that have been deemed “invalid” within a certain time frame.
     *
     * ## Prerequisites
     *
     * To use this endpoint, you’ll need an [API key](https://www.braze.com/docs/api/basics#rest-api-key/) with the `sms.invalid_phone_numbers` permission.
     *
     * ## Rate limit
     *
     * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
     *
     * ## Request parameters
     *
     * |  | Required | Data Type | Description |
     * | --- | --- | --- | --- |
     * | `start_date` | Optional  <br>(see note) | String in YYYY-MM-DD format | Start date of the range to retrieve invalid phone numbers, must be earlier than `end_date`. This is treated as midnight in UTC time by the API. |
     * | `end_date` | Optional  <br>(see note) | String in YYYY-MM-DD format | End date of the range to retrieve invalid phone numbers. This is treated as midnight in UTC time by the API. |
     * | `limit` | Optional | Integer | Optional field to limit the number of results returned. Defaults to 100, maximum is 500. |
     * | `offset` | Optional | Integer | Optional beginning point in the list to retrieve from. |
     * | `phone_numbers` | Optional  <br>(see note) | Array of Strings in e.164 format | If provided, we will return the phone number if it has been found to be invalid. |
     * | `reason` | Optional  <br>(see note) | String | Available values are “provider_error” (provider error indicates phone cannot receive SMS) or “deactivated” (phone number has been deactivated). If omitted, all reasons are returned. |
     *
     * - You must provide either a `start_date` and an `end_date` OR `phone_numbers`. If you provide all three, `start_date`, `end_date`, and `phone_numbers`, we prioritize the given phone numbers and disregard the date range.
     *
     * - If your date range has more than the `limit` number of invalid phone numbers, you will need to make multiple API calls with increasing the `offset` each time until a call returns either fewer than `limit` or zero results.
     *
     *
     * ## Example request
     *
     * ``` json
     * curl --location --request GET 'https://rest.iad-01.braze.com/sms/invalid_phone_numbers?start_date=2019-01-01&end_date=2019-02-01&limit=100&offset=1&phone_numbers[]=12345678901' \
     * --header 'Authorization: Bearer YOUR-API-KEY-HERE'
     *
     * ```
     *
     * ## Response
     *
     * Entries are listed in descending order.
     *
     * ``` json
     * Content-Type: application/json
     * Authorization: Bearer YOUR-REST-API-KEY
     * {
     * "sms": [
     * {
     * "phone": (string) phone number in e.164 format,
     * "invalid_detected_at": (string) the time the invalid number was detected in ISO 8601
     * "reason" : "provider_error"
     * },
     * {
     * "phone": (string) phone number in e.164 format,
     * "invalid_detected_at": (string) the time the invalid number was detected in ISO 8601
     * "reason" : "deactivated"
     * },
     * {
     * "phone": (string) phone number in e.164 format,
     * "invalid_detected_at": (string) the time the invalid number was detected in ISO 8601
     * "reason" : "provider_error"
     * }
     * ],
     * "message": "success"
     * }
     *
     * ```
     *
     * @param array $queryParameters {
     *
     * @var string $start_date (Optional*) String in YYYY-MM-DD format
     *
     * Start date of the range to retrieve invalid phone numbers, must be earlier than `end_date`. This is treated as midnight in UTC time by the API.
     * @var string $end_date (Optional*) String in YYYY-MM-DD format
     *
     * End date of the range to retrieve invalid phone numbers. This is treated as midnight in UTC time by the API.
     * @var int $limit (Optional) Integer
     *
     * Optional field to limit the number of results returned. Defaults to 100, maximum is 500.
     * @var int $offset (Optional) Integer
     *
     * Optional beginning point in the list to retrieve from
     * @var int $phone_numbers (Optional*) Array of Strings in e.164 format
     *
     * If provided, we will return the phone number if it has been found to be invalid.
     * @var string $reason (Optional) String
     *
     * Available values are “provider_error” (provider error indicates phone cannot receive SMS) or “deactivated” (phone number has been deactivated). If omitted, all reasons are returned.
     * }
     *
     * @param array $headerParameters {
     *
     * @var string $Authorization
     *             }
     */
    public function __construct(array $queryParameters = [], array $headerParameters = [])
    {
        $this->queryParameters = $queryParameters;
        $this->headerParameters = $headerParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return '/sms/invalid_phone_numbers';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['start_date', 'end_date', 'limit', 'offset', 'phone_numbers', 'reason']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('start_date', ['string']);
        $optionsResolver->addAllowedTypes('end_date', ['string']);
        $optionsResolver->addAllowedTypes('limit', ['int']);
        $optionsResolver->addAllowedTypes('offset', ['int']);
        $optionsResolver->addAllowedTypes('phone_numbers', ['int']);
        $optionsResolver->addAllowedTypes('reason', ['string']);

        return $optionsResolver;
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['Authorization']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('Authorization', ['string']);

        return $optionsResolver;
    }

    /**
     * @return null
     *
     * @throws \Braze\Exception\GetSmsInvalidPhoneNumberBadRequestException
     * @throws \Braze\Exception\GetSmsInvalidPhoneNumberUnauthorizedException
     * @throws \Braze\Exception\GetSmsInvalidPhoneNumberForbiddenException
     * @throws \Braze\Exception\GetSmsInvalidPhoneNumberNotFoundException
     * @throws \Braze\Exception\GetSmsInvalidPhoneNumberTooManyRequestsException
     * @throws \Braze\Exception\GetSmsInvalidPhoneNumberInternalServerErrorException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return json_decode($body);
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSmsInvalidPhoneNumberBadRequestException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (401 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSmsInvalidPhoneNumberUnauthorizedException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSmsInvalidPhoneNumberForbiddenException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSmsInvalidPhoneNumberNotFoundException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (429 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSmsInvalidPhoneNumberTooManyRequestsException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\GetSmsInvalidPhoneNumberInternalServerErrorException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['BearerAuth'];
    }
}
