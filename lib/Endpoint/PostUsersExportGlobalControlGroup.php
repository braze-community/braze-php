<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Endpoint;

class PostUsersExportGlobalControlGroup extends \Braze\Runtime\Client\BaseEndpoint implements \Braze\Runtime\Client\Endpoint
{
    use \Braze\Runtime\Client\EndpointTrait;

    /**
     * > Use this endpoint to export all users within a Global Control Group.
     *
     * User data is exported as multiple files of user JSON objects separated by new lines (i.e., one JSON object per line).
     *
     * > Warning: Individual custom attributes cannot be exported. However, all custom attributes can be exported by including custom_attributes in the fields_to_export array (e.g.,\[‘first_name’, ‘email’, ‘custom_attributes’\]).
     *
     *
     * To use this endpoint, you’ll need to generate an API key with the `users.export.global_control_group` permission.
     *
     * ## Rate limit
     *
     * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](http://localhost:4000/docs/api/api_limits/).
     *
     * ## Credential-based response details
     *
     * For information regarding credentials-based response details, visit this [section](https://www.braze.com/docs/api/endpoints/export/user_data/post_users_global_control_group/#credentials-based-response-details) in the Braze API docs.
     *
     * ## Request parameters
     *
     * | Parameter | Required | Data Type | Description |
     * | --- | --- | --- | --- |
     * | `callback_endpoint` | Optional | String | Endpoint to post a download URL to when the export is available. |
     * | `fields_to_export` | Required\* | Array of strings | Name of user data fields to export, you may also export custom attributes.  <br>  <br>\*Beginning April 2021, new accounts must specify specific fields to export. |
     * | `output_format` | Optional | String | When using your own S3 bucket, allows to specify file format as `zip` or `gzip`. Defaults to ZIP file format. |
     *
     * ## Fields to export
     *
     * The following is a list of valid `fields_to_export`. Using `fields_to_export` to minimize the data returned can improve response time of this API endpoint:
     *
     * | Field to export | Data type | Description |
     * | --- | --- | --- |
     * | `apps` | Array | Apps this user has logged sessions for, which includes the fields:  <br>  <br>\- `name`: app name  <br>\- `platform`: app platform, such as iOS, Android, or Web  <br>\- `version`: app version number or name  <br>\- `sessions`: total number of sessions for this app  <br>\- `first_used`: date of first session  <br>\- `last_used`: date of last session  <br>  <br>All fields are strings. |
     * | `attributed_campaign` | String | Data from [attribution integrations](https:/www.braze.com/docs/partners/message_orchestration/attribution), if set up. Identifier for a particular ad campaign. |
     * | `attributed_source` | String | Data from [attribution integrations](https:/www.braze.com/docs/partners/message_orchestration/attribution), if set up. Identifier for the platform the ad was on. |
     * | `attributed_adgroup` | String | Data from [attribution integrations](https:/www.braze.com/docs/partners/message_orchestration/attribution), if set up. Identifier for an optional sub-grouping below campaign. |
     * | `attributed_ad` | String | Data from [attribution integrations](https:/www.braze.com/docs/partners/message_orchestration/attribution), if set up. Identifier for an optional sub-grouping below campaign and adgroup. |
     * | `braze_id` | String | Device-specific unique user identifier set by Braze for this user. |
     * | `country` | String | User's country using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) standard. |
     * | `created_at` | String | Date and time for when the user profile was created, in ISO 8601 format. |
     * | `custom_attributes` | Object | Custom attribute key-value pairs for this user. |
     * | `custom_events` | Array | Custom events attributed to this user in the last 90 days. |
     * | `devices` | Array | Information about the user's device, which could include the following depending on platform:  <br>  <br>\- `model`: Device's model name  <br>\- `os`: Device's operating system  <br>\- `carrier`: Device's service carrier, if available  <br>\- `idfv`: (iOS) Braze's device identifier, the Apple Identifier for Vendor, if exists  <br>\- `idfa`: (iOS) Identifier for Advertising, if exists  <br>\- `device_id`: (Android) Braze's device identifier  <br>\- `google_ad_id`: (Android) Google Play Advertising Identifier, if exists  <br>\- `roku_ad_id`: (Roku) Roku Advertising Identifier  <br>\- `ad_tracking_enabled`: If ad tracking is enabled on the device, can be true or false |
     * | `dob` | String | User's date of birth in the format `YYYY-MM-DD`. |
     * | `email` | String | User's email address. |
     * | `external_id` | String | Unique user identifier for identified users. |
     * | `first_name` | String | User's first name. |
     * | `gender` | String | User's gender. Possible values are:  <br>  <br>\- `M`: male  <br>\- `F`: female  <br>\- `O`: other  <br>\- `N`: not applicable  <br>\- `P`: prefer not to say  <br>\- `nil`: unknown |
     * | `home_city` | String | User's home city. |
     * | `language` | String | User's language in ISO-639-1 standard. |
     * | `last_coordinates` | Array of floats | User's most recent device location, formatted as `[longitude, latitude]`. |
     * | `last_name` | String | User's last name. |
     * | `phone` | String | User's telephone number in E.164 format. |
     * | `purchase`s | Array | Purchases this user has made in the last 90 days. |
     * | `random_bucket` | Integer | User's [random bucket number](https:/www.braze.com/docs/user_guide/data_and_analytics/braze_currents/event_glossary/customer_behavior_events#random-bucket-number-event), used to create uniformly distributed segments of random users. |
     * | `time_zone` | String | User's time zone in the same format as the IANA Time Zone Database. |
     * | `total_revenue` | Float | Total revenue attributed to this user. Total revenue is calculated based on purchases the user made during conversion windows for the campaigns and Canvases they received. |
     * | `uninstalled_at` | Timestamp | Date and time the user uninstalls the app. Omitted if the app has not been uninstalled. |
     * | `user_aliases` | Object | [User aliases object](https:/www.braze.com/docs/api/objects_filters/user_alias_object#user-alias-object-specification) containing the `alias_name` and `alias_label`, if exists. |
     *
     * ## Response
     *
     * ```
     * Content-Type: application/json
     * Authorization: Bearer YOUR-REST-API-KEY
     * {
     * "message": (required, string) the status of the export, returns 'success' when completed without errors,
     * "object_prefix": (required, string) the filename prefix that will be used for the JSON file produced by this export, e.g.,'bb8e2a91-c4aa-478b-b3f2-a4ee91731ad1-1464728599',
     * "url" : (optional, string) the URL where the segment export data can be downloaded if you do not have your own S3 credentials
     * }
     *
     * ```
     *
     * Once made available, the URL will only be valid for a few hours. As such, we highly recommend that you add your own S3 credentials to Braze.
     *
     * ### Sample user export file output
     *
     * User export object (we will include the least data possible - if a field is missing from the object it should be assumed to be null, false, or empty):
     *
     * ```
     * {
     * "external_id" : (string),
     * "user_aliases" : [
     * {
     * "alias_name" : (string),
     * "alias_label" : (string)
     * }
     * ],
     * "braze_id": (string),
     * "first_name" : (string),
     * "last_name" : (string),
     * "email" : (string),
     * "dob" : (string) date for the user's date of birth,
     * "home_city" : (string),
     * "country" : (string),
     * "phone" : (string),
     * "language" : (string) ISO-639 two letter code,
     * "time_zone" : (string),
     * "last_coordinates" : (array of float) [lon, lat],
     * "gender" : (string) "M" | "F",
     * "total_revenue" : (float),
     * "attributed_campaign" : (string),
     * "attributed_source" : (string),
     * "attributed_adgroup" : (string),
     * "attributed_ad" : (string),
     * "custom_attributes" : (object) custom attribute key-value pairs,
     * "custom_events" : [
     * {
     * "name" : (string),
     * "first" : (string) date,
     * "last" : (string) date,
     * "count" : (int)
     * },
     * ...
     * ],
     * "purchases" : [
     * {
     * "name" : (string),
     * "first" : (string) date,
     * "last" : (string) date,
     * "count" : (int)
     * },
     * ...
     * ],
     * "devices" : [
     * {
     * "model" : (string),
     * "os" : (string),
     * "carrier" : (string),
     * "idfv" : (string) only included for iOS devices,
     * "idfa" : (string) only included for iOS devices when IDFA collection is enabled,
     * "google_ad_id" : (string) only included for Android devices when Google Play Advertising Identifier collection is enabled,
     * "roku_ad_id" : (string) only included for Roku devices,
     * "windows_ad_id" : (string) only included for Windows devices,
     * "ad_tracking_enabled" : (bool)
     * },
     * ...
     * ],
     * "apps" : [
     * {
     * "name" : (string),
     * "platform" : (string),
     * "version" : (string),
     * "sessions" : (string),
     * "first_used" : (string) date,
     * "last_used" : (string) date
     * },
     * ...
     * ],
     * }
     *
     * ```
     *
     * ### Sample output
     *
     * ``` json
     * {
     * "created_at" : "2020-07-10 15:00:00.000 UTC",
     * "external_id" : "A8i3mkd99",
     * "user_aliases" : [
     * {
     * "alias_name" : "user_123",
     * "alias_label" : "amplitude_id"
     * }
     * ],
     * "braze_id": "5fbd99bac125ca40511f2cb1",
     * "random_bucket" : 2365,
     * "first_name" : "Jane",
     * "last_name" : "Doe",
     * "email" : "example@braze.com",
     * "dob" : "1980-12-21",
     * "home_city" : "Chicago",
     * "country" : "US",
     * "phone" : "+442071838750",
     * "language" : "en",
     * "time_zone" : "Eastern Time (US & Canada)",
     * "last_coordinates" : [41.84157636433568, -87.83520818508256],
     * "gender" : "F",
     * "total_revenue" : 65,
     * "attributed_campaign" : "braze_test_campaign_072219",
     * "attributed_source" : "braze_test_source_072219",
     * "attributed_adgroup" : "braze_test_adgroup_072219",
     * "attributed_ad" : "braze_test_ad_072219",
     * "custom_attributes":
     * {
     * "loyaltyId": "37c98b9d-9a7f-4b2f-a125-d873c5152856",
     * "loyaltyPoints": "321",
     * "loyaltyPointsNumber": 107
     * },
     * "custom_events": [
     * {
     * "name": "Loyalty Acknowledgement",
     * "first": "2021-06-28T17:02:43.032Z",
     * "last": "2021-06-28T17:02:43.032Z",
     * "count": 1
     * },
     * ...
     * ],
     * "purchases": [
     * {
     * "name": "item_40834",
     * "first": "2021-09-05T03:45:50.540Z",
     * "last": "2022-06-03T17:30:41.201Z",
     * "count": 10
     * },
     * ...
     * ],
     * "devices": [
     * {
     * "model": "Pixel XL",
     * "os": "Android (Q)",
     * "carrier": null,
     * "device_id": "312ef2c1-83db-4789-967-554545a1bf7a",
     * "ad_tracking_enabled": true
     * },
     * ...
     * ],
     * "apps": [
     * {
     * "name": "MovieCannon",
     * "platform": "Android",
     * "version": "3.29.0",
     * "sessions": 1129,
     * "first_used": "2020-02-02T19:56:19.142Z",
     * "last_used": "2021-11-11T00:25:19.201Z"
     * },
     * ...
     * ],
     * }
     *
     * ```
     *
     * @param array $headerParameters {
     *
     * @var string $Content-Type
     * @var string $Authorization
     *             }
     */
    public function __construct(?\Braze\Model\UsersExportGlobalControlGroupPostBody $requestBody = null, array $headerParameters = [])
    {
        $this->body = $requestBody;
        $this->headerParameters = $headerParameters;
    }

    public function getMethod(): string
    {
        return 'POST';
    }

    public function getUri(): string
    {
        return '/users/export/global_control_group';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        if ($this->body instanceof \Braze\Model\UsersExportGlobalControlGroupPostBody) {
            return [['Content-Type' => ['application/json']], $serializer->serialize($this->body, 'json')];
        }

        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['Content-Type', 'Authorization']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('Content-Type', ['string']);
        $optionsResolver->addAllowedTypes('Authorization', ['string']);

        return $optionsResolver;
    }

    /**
     * @return null
     *
     * @throws \Braze\Exception\PostUsersExportGlobalControlGroupBadRequestException
     * @throws \Braze\Exception\PostUsersExportGlobalControlGroupUnauthorizedException
     * @throws \Braze\Exception\PostUsersExportGlobalControlGroupForbiddenException
     * @throws \Braze\Exception\PostUsersExportGlobalControlGroupNotFoundException
     * @throws \Braze\Exception\PostUsersExportGlobalControlGroupTooManyRequestsException
     * @throws \Braze\Exception\PostUsersExportGlobalControlGroupInternalServerErrorException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return json_decode($body);
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PostUsersExportGlobalControlGroupBadRequestException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (401 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PostUsersExportGlobalControlGroupUnauthorizedException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PostUsersExportGlobalControlGroupForbiddenException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PostUsersExportGlobalControlGroupNotFoundException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (429 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PostUsersExportGlobalControlGroupTooManyRequestsException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PostUsersExportGlobalControlGroupInternalServerErrorException($serializer->deserialize($body, 'Braze\\Model\\Error', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['BearerAuth'];
    }
}
