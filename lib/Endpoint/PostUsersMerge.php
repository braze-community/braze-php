<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Endpoint;

class PostUsersMerge extends \Braze\Runtime\Client\BaseEndpoint implements \Braze\Runtime\Client\Endpoint
{
    use \Braze\Runtime\Client\EndpointTrait;

    /**
     * > Use this endpoint to merge one user into another user.
     *
     * Up to 50 merges may be specified per request. This endpoint is asynchronous.
     *
     * ## Prerequisites
     *
     * To use this endpoint, you'll need an [API key](https://braze.com/docs/api/api_key/) with the `users.merge` permission.
     *
     * ## Rate limit
     *
     * For customers who onboarded with Braze on or after September 16, 2021, we apply a shared rate limit of 20,000 requests per minute to this endpoint. This rate limit is shared with the `/users/delete`, `/users/alias/new`, `/users/identify`, and `/users/alias/update` endpoints, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
     *
     * ## Request parameters
     *
     * | Parameter | Required | Data Type | Description |
     * | --- | --- | --- | --- |
     * | `merge_updates` | Required | Array | An object array. Each object should contain an `identifier_to_merge` object and an `identifier_to_keep` object, which should each reference a user either by external_id, `user_alias` or `email`. |
     *
     * ### Merge behavior
     *
     * The behavior documented below is true for all Braze features that _are not_ powered by Snowflake. User merges won’t be reflected for the **Messaging History** tab, Segment Extensions, Query Builder, and Currents.
     *
     * > **Important**: The endpoint does not guarantee the sequence of `merge_updates` objects being updated.
     *
     *
     * This endpoint will merge any of the following fields if they're not found on the target user:
     *
     * - First name
     *
     * - Last name
     *
     * - Email
     *
     * - Gender
     *
     * - Date of birth
     *
     * - Phone number
     *
     * - Time zone
     *
     * - Home city
     *
     * - Country
     *
     * - Language
     *
     * - Session count (the sum of sessions from both profiles)
     *
     * - Date of first session (Braze will pick the earlier date of the two dates)
     *
     * - Date of last session (Braze will pick the later date of the two dates)
     *
     * - Custom attributes (existing custom attributes on the target profile are retained and will include custom attributes that didn’t exist on the target profile)
     *
     * - Custom event and purchase event data
     *
     * - Custom event and purchase event properties for “X times in Y days” segmentation (where X<=50 and Y<=30)
     *
     * - Segmentable custom events summary
     *
     * - Event count (the sum from both profiles)
     *
     * - Event first occurred (Braze will pick the earlier date of the two dates)
     *
     * - Event last occurred (Braze will pick the later date of the two dates)
     *
     * - In-app purchase total in cents (the sum from both profiles)
     *
     * - Total number of purchases (the sum from both profiles)
     *
     * - Date of first purchase (Braze will pick the earlier date of the two dates)
     *
     * - Date of last purchase (Braze will pick the later date of the two dates)
     *
     * - App summaries
     *
     * - Last_X_at fields (Braze will update the fields if the orphaned profile fields are more recent)
     *
     * - Campaign interaction data (Braze will pick the most recent date fields)
     *
     * - Workflow summaries (Braze will pick the most recent date fields)
     *
     * - Message and message engagement history
     *
     * - Session data will only be merged if the app exists on both user profiles
     *
     *
     * > **Note:** When merging users, using the `/users/merge` endpoint works the same way as using the [&lt;code&gt;changeUser()&lt;/code&gt;&amp;nbsp;method](https://js.appboycdn.com/web-sdk/latest/doc/modules/braze.html#changeuser).
     *
     *
     * #### Custom event date and purchase event date behavior
     *
     * Note that these merged fields will update “for X events in Y days” filters. For purchase events, these filters include “number of purchases in Y days” and “money spent in last Y days”.
     *
     * ### Merging users by email or phone number
     *
     * If an `email` or `phone` is specified as an identifier, an additional `prioritization` value is required in the identifier. The `prioritization` should be an array specifying which user to merge if there are multiple users found. `prioritization` is an ordered array, meaning if more than one user matches from a prioritization, then merging will not occur.
     *
     * The allowed values for the array are: `identified`, `unidentified`, `most_recently_updated`. `most_recently_updated` refers to prioritizing the most recently updated user.
     *
     * Only one of the following options may exist in the prioritization array at a time:
     *
     * - `identified` refers to prioritizing a user with an `external_id`
     *
     * - `unidentified` refers to prioritizing a user without an `external_id`
     *
     *
     * ## Response
     *
     * There are two status code responses for this endpoint: `202` and `400`.
     *
     * ### Example success response
     *
     * The status code `202` could return the following response body.
     *
     * ``` json
     * {
     * "message": "success"
     * }
     *
     * ```
     *
     * ### Example error response
     *
     * The status code `400` could return the following response body. Refer to Troubleshooting for more information about errors you may encounter.
     *
     * ``` json
     * {
     * "message": "'merge_updates' must be an array of objects"
     * }
     *
     * ```
     *
     * ## Troubleshooting
     *
     * The following table lists possible error messages that may occur.
     *
     * | Error | Troubleshooting |
     * | --- | --- |
     * | `'merge_updates' must be an array of objects` | Check that `merge_updates` is an array of objects. |
     * | `a single request may not contain more than 50 merge updates` | You can only specify up to 50 merge updates in a single request. |
     * | `identifiers must be objects with an 'external_id' property that is a string, or 'user_alias' property that is an object` | Check the identifiers in your request. |
     * | `'merge_updates' must only have 'identifier_to_merge' and 'identifier_to_keep'` | Check that `merge_updates` only contains the two objects `identifier_to_merge` and `identifier_to_keep`. |
     *
     * @param array $headerParameters {
     *
     * @var string $Content-Type
     * @var string $Authorization
     *             }
     */
    public function __construct(?\Braze\Model\UsersMergePostBody $requestBody = null, array $headerParameters = [])
    {
        $this->body = $requestBody;
        $this->headerParameters = $headerParameters;
    }

    public function getMethod(): string
    {
        return 'POST';
    }

    public function getUri(): string
    {
        return '/users/merge';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        if ($this->body instanceof \Braze\Model\UsersMergePostBody) {
            return [['Content-Type' => ['application/json']], $serializer->serialize($this->body, 'json')];
        }

        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['Content-Type', 'Authorization']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('Content-Type', ['string']);
        $optionsResolver->addAllowedTypes('Authorization', ['string']);

        return $optionsResolver;
    }

    /**
     * @return null
     *
     * @throws \Braze\Exception\PostUsersMergeBadRequestException
     * @throws \Braze\Exception\PostUsersMergeUnauthorizedException
     * @throws \Braze\Exception\PostUsersMergeForbiddenException
     * @throws \Braze\Exception\PostUsersMergeNotFoundException
     * @throws \Braze\Exception\PostUsersMergeTooManyRequestsException
     * @throws \Braze\Exception\PostUsersMergeInternalServerErrorException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return json_decode($body);
        }
        if (is_null($contentType) === false && (201 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return json_decode($body);
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PostUsersMergeBadRequestException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (401 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PostUsersMergeUnauthorizedException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PostUsersMergeForbiddenException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PostUsersMergeNotFoundException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (429 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PostUsersMergeTooManyRequestsException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Braze\Exception\PostUsersMergeInternalServerErrorException($serializer->deserialize($body, 'Braze\Model\Error', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['BearerAuth'];
    }
}
