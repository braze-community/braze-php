<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Normalizer;

use Braze\Runtime\Normalizer\CheckArray;
use Braze\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CampaignsTriggerScheduleCreatePostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Braze\Model\CampaignsTriggerScheduleCreatePostBody::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Braze\Model\CampaignsTriggerScheduleCreatePostBody::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Braze\Model\CampaignsTriggerScheduleCreatePostBody();
        if (\array_key_exists('broadcast', $data) && \is_int($data['broadcast'])) {
            $data['broadcast'] = (bool) $data['broadcast'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('campaign_id', $data)) {
            $object->setCampaignId($data['campaign_id']);
            unset($data['campaign_id']);
        }
        if (\array_key_exists('send_id', $data)) {
            $object->setSendId($data['send_id']);
            unset($data['send_id']);
        }
        if (\array_key_exists('recipients', $data)) {
            $values = [];
            foreach ($data['recipients'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Braze\Model\CampaignsTriggerScheduleCreatePostBodyRecipientsItem::class, 'json', $context);
            }
            $object->setRecipients($values);
            unset($data['recipients']);
        }
        if (\array_key_exists('audience', $data)) {
            $object->setAudience($this->denormalizer->denormalize($data['audience'], \Braze\Model\CampaignsTriggerScheduleCreatePostBodyAudience::class, 'json', $context));
            unset($data['audience']);
        }
        if (\array_key_exists('broadcast', $data)) {
            $object->setBroadcast($data['broadcast']);
            unset($data['broadcast']);
        }
        if (\array_key_exists('trigger_properties', $data)) {
            $values_1 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['trigger_properties'] as $key => $value_1) {
                $values_1[$key] = $value_1;
            }
            $object->setTriggerProperties($values_1);
            unset($data['trigger_properties']);
        }
        if (\array_key_exists('schedule', $data)) {
            $object->setSchedule($this->denormalizer->denormalize($data['schedule'], \Braze\Model\CampaignsTriggerScheduleCreatePostBodySchedule::class, 'json', $context));
            unset($data['schedule']);
        }
        foreach ($data as $key_1 => $value_2) {
            if (preg_match('/.*/', (string) $key_1)) {
                $object[$key_1] = $value_2;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('campaignId') && null !== $data->getCampaignId()) {
            $dataArray['campaign_id'] = $data->getCampaignId();
        }
        if ($data->isInitialized('sendId') && null !== $data->getSendId()) {
            $dataArray['send_id'] = $data->getSendId();
        }
        if ($data->isInitialized('recipients') && null !== $data->getRecipients()) {
            $values = [];
            foreach ($data->getRecipients() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['recipients'] = $values;
        }
        if ($data->isInitialized('audience') && null !== $data->getAudience()) {
            $dataArray['audience'] = $this->normalizer->normalize($data->getAudience(), 'json', $context);
        }
        if ($data->isInitialized('broadcast') && null !== $data->getBroadcast()) {
            $dataArray['broadcast'] = $data->getBroadcast();
        }
        if ($data->isInitialized('triggerProperties') && null !== $data->getTriggerProperties()) {
            $values_1 = [];
            foreach ($data->getTriggerProperties() as $key => $value_1) {
                $values_1[$key] = $value_1;
            }
            $dataArray['trigger_properties'] = $values_1;
        }
        if ($data->isInitialized('schedule') && null !== $data->getSchedule()) {
            $dataArray['schedule'] = $this->normalizer->normalize($data->getSchedule(), 'json', $context);
        }
        foreach ($data as $key_1 => $value_2) {
            if (preg_match('/.*/', (string) $key_1)) {
                $dataArray[$key_1] = $value_2;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Braze\Model\CampaignsTriggerScheduleCreatePostBody::class => false];
    }
}
