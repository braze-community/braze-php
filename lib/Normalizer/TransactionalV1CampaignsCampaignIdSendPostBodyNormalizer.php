<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Normalizer;

use Braze\Runtime\Normalizer\CheckArray;
use Braze\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class TransactionalV1CampaignsCampaignIdSendPostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Braze\Model\TransactionalV1CampaignsCampaignIdSendPostBody::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Braze\Model\TransactionalV1CampaignsCampaignIdSendPostBody::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Braze\Model\TransactionalV1CampaignsCampaignIdSendPostBody();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('external_send_id', $data)) {
            $object->setExternalSendId($data['external_send_id']);
            unset($data['external_send_id']);
        }
        if (\array_key_exists('trigger_properties', $data)) {
            $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['trigger_properties'] as $key => $value) {
                $values[$key] = $value;
            }
            $object->setTriggerProperties($values);
            unset($data['trigger_properties']);
        }
        if (\array_key_exists('recipient', $data)) {
            $values_1 = [];
            foreach ($data['recipient'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, \Braze\Model\TransactionalV1CampaignsCampaignIdSendPostBodyRecipientItem::class, 'json', $context);
            }
            $object->setRecipient($values_1);
            unset($data['recipient']);
        }
        foreach ($data as $key_1 => $value_2) {
            if (preg_match('/.*/', (string) $key_1)) {
                $object[$key_1] = $value_2;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('externalSendId') && null !== $data->getExternalSendId()) {
            $dataArray['external_send_id'] = $data->getExternalSendId();
        }
        if ($data->isInitialized('triggerProperties') && null !== $data->getTriggerProperties()) {
            $values = [];
            foreach ($data->getTriggerProperties() as $key => $value) {
                $values[$key] = $value;
            }
            $dataArray['trigger_properties'] = $values;
        }
        if ($data->isInitialized('recipient') && null !== $data->getRecipient()) {
            $values_1 = [];
            foreach ($data->getRecipient() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $dataArray['recipient'] = $values_1;
        }
        foreach ($data as $key_1 => $value_2) {
            if (preg_match('/.*/', (string) $key_1)) {
                $dataArray[$key_1] = $value_2;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Braze\Model\TransactionalV1CampaignsCampaignIdSendPostBody::class => false];
    }
}
