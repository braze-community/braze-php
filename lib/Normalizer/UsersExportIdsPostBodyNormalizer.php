<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Normalizer;

use Braze\Runtime\Normalizer\CheckArray;
use Braze\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class UsersExportIdsPostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Braze\Model\UsersExportIdsPostBody::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Braze\Model\UsersExportIdsPostBody::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Braze\Model\UsersExportIdsPostBody();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('external_ids', $data)) {
            $values = [];
            foreach ($data['external_ids'] as $value) {
                $values[] = $value;
            }
            $object->setExternalIds($values);
            unset($data['external_ids']);
        }
        if (\array_key_exists('user_aliases', $data)) {
            $values_1 = [];
            foreach ($data['user_aliases'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, \Braze\Model\UsersExportIdsPostBodyUserAliasesItem::class, 'json', $context);
            }
            $object->setUserAliases($values_1);
            unset($data['user_aliases']);
        }
        if (\array_key_exists('device_id', $data)) {
            $object->setDeviceId($data['device_id']);
            unset($data['device_id']);
        }
        if (\array_key_exists('braze_id', $data)) {
            $object->setBrazeId($data['braze_id']);
            unset($data['braze_id']);
        }
        if (\array_key_exists('email_address', $data)) {
            $object->setEmailAddress($data['email_address']);
            unset($data['email_address']);
        }
        if (\array_key_exists('phone', $data)) {
            $object->setPhone($data['phone']);
            unset($data['phone']);
        }
        if (\array_key_exists('fields_to_export', $data)) {
            $values_2 = [];
            foreach ($data['fields_to_export'] as $value_2) {
                $values_2[] = $value_2;
            }
            $object->setFieldsToExport($values_2);
            unset($data['fields_to_export']);
        }
        foreach ($data as $key => $value_3) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_3;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('externalIds') && null !== $data->getExternalIds()) {
            $values = [];
            foreach ($data->getExternalIds() as $value) {
                $values[] = $value;
            }
            $dataArray['external_ids'] = $values;
        }
        if ($data->isInitialized('userAliases') && null !== $data->getUserAliases()) {
            $values_1 = [];
            foreach ($data->getUserAliases() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $dataArray['user_aliases'] = $values_1;
        }
        if ($data->isInitialized('deviceId') && null !== $data->getDeviceId()) {
            $dataArray['device_id'] = $data->getDeviceId();
        }
        if ($data->isInitialized('brazeId') && null !== $data->getBrazeId()) {
            $dataArray['braze_id'] = $data->getBrazeId();
        }
        if ($data->isInitialized('emailAddress') && null !== $data->getEmailAddress()) {
            $dataArray['email_address'] = $data->getEmailAddress();
        }
        if ($data->isInitialized('phone') && null !== $data->getPhone()) {
            $dataArray['phone'] = $data->getPhone();
        }
        if ($data->isInitialized('fieldsToExport') && null !== $data->getFieldsToExport()) {
            $values_2 = [];
            foreach ($data->getFieldsToExport() as $value_2) {
                $values_2[] = $value_2;
            }
            $dataArray['fields_to_export'] = $values_2;
        }
        foreach ($data as $key => $value_3) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_3;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Braze\Model\UsersExportIdsPostBody::class => false];
    }
}
