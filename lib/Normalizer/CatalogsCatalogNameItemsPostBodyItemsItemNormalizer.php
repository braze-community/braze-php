<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Normalizer;

use Braze\Runtime\Normalizer\CheckArray;
use Braze\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CatalogsCatalogNameItemsPostBodyItemsItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Braze\Model\CatalogsCatalogNameItemsPostBodyItemsItem::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Braze\Model\CatalogsCatalogNameItemsPostBodyItemsItem::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Braze\Model\CatalogsCatalogNameItemsPostBodyItemsItem();
        if (\array_key_exists('Loyalty_Program', $data) && \is_int($data['Loyalty_Program'])) {
            $data['Loyalty_Program'] = (bool) $data['Loyalty_Program'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data)) {
            $object->setId($data['id']);
            unset($data['id']);
        }
        if (\array_key_exists('Name', $data)) {
            $object->setName($data['Name']);
            unset($data['Name']);
        }
        if (\array_key_exists('City', $data)) {
            $object->setCity($data['City']);
            unset($data['City']);
        }
        if (\array_key_exists('Cuisine', $data)) {
            $object->setCuisine($data['Cuisine']);
            unset($data['Cuisine']);
        }
        if (\array_key_exists('Rating', $data)) {
            $object->setRating($data['Rating']);
            unset($data['Rating']);
        }
        if (\array_key_exists('Loyalty_Program', $data)) {
            $object->setLoyaltyProgram($data['Loyalty_Program']);
            unset($data['Loyalty_Program']);
        }
        if (\array_key_exists('Created_At', $data)) {
            $object->setCreatedAt(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['Created_At']));
            unset($data['Created_At']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('id') && null !== $data->getId()) {
            $dataArray['id'] = $data->getId();
        }
        if ($data->isInitialized('name') && null !== $data->getName()) {
            $dataArray['Name'] = $data->getName();
        }
        if ($data->isInitialized('city') && null !== $data->getCity()) {
            $dataArray['City'] = $data->getCity();
        }
        if ($data->isInitialized('cuisine') && null !== $data->getCuisine()) {
            $dataArray['Cuisine'] = $data->getCuisine();
        }
        if ($data->isInitialized('rating') && null !== $data->getRating()) {
            $dataArray['Rating'] = $data->getRating();
        }
        if ($data->isInitialized('loyaltyProgram') && null !== $data->getLoyaltyProgram()) {
            $dataArray['Loyalty_Program'] = $data->getLoyaltyProgram();
        }
        if ($data->isInitialized('createdAt') && null !== $data->getCreatedAt()) {
            $dataArray['Created_At'] = $data->getCreatedAt()?->format('Y-m-d\TH:i:sP');
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Braze\Model\CatalogsCatalogNameItemsPostBodyItemsItem::class => false];
    }
}
