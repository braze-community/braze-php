<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Normalizer;

use Braze\Runtime\Normalizer\CheckArray;
use Braze\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class MessagesLiveActivityUpdatePostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Braze\Model\MessagesLiveActivityUpdatePostBody::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Braze\Model\MessagesLiveActivityUpdatePostBody::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Braze\Model\MessagesLiveActivityUpdatePostBody();
        if (\array_key_exists('end_activity', $data) && \is_int($data['end_activity'])) {
            $data['end_activity'] = (bool) $data['end_activity'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('app_id', $data)) {
            $object->setAppId($data['app_id']);
            unset($data['app_id']);
        }
        if (\array_key_exists('activity_id', $data)) {
            $object->setActivityId($data['activity_id']);
            unset($data['activity_id']);
        }
        if (\array_key_exists('content_state', $data)) {
            $object->setContentState($this->denormalizer->denormalize($data['content_state'], \Braze\Model\MessagesLiveActivityUpdatePostBodyContentState::class, 'json', $context));
            unset($data['content_state']);
        }
        if (\array_key_exists('end_activity', $data)) {
            $object->setEndActivity($data['end_activity']);
            unset($data['end_activity']);
        }
        if (\array_key_exists('dismissal_date', $data)) {
            $object->setDismissalDate(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['dismissal_date']));
            unset($data['dismissal_date']);
        }
        if (\array_key_exists('stale_date', $data)) {
            $object->setStaleDate(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['stale_date']));
            unset($data['stale_date']);
        }
        if (\array_key_exists('notification', $data)) {
            $object->setNotification($this->denormalizer->denormalize($data['notification'], \Braze\Model\MessagesLiveActivityUpdatePostBodyNotification::class, 'json', $context));
            unset($data['notification']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('appId') && null !== $data->getAppId()) {
            $dataArray['app_id'] = $data->getAppId();
        }
        if ($data->isInitialized('activityId') && null !== $data->getActivityId()) {
            $dataArray['activity_id'] = $data->getActivityId();
        }
        if ($data->isInitialized('contentState') && null !== $data->getContentState()) {
            $dataArray['content_state'] = $this->normalizer->normalize($data->getContentState(), 'json', $context);
        }
        if ($data->isInitialized('endActivity') && null !== $data->getEndActivity()) {
            $dataArray['end_activity'] = $data->getEndActivity();
        }
        if ($data->isInitialized('dismissalDate') && null !== $data->getDismissalDate()) {
            $dataArray['dismissal_date'] = $data->getDismissalDate()?->format('Y-m-d\TH:i:sP');
        }
        if ($data->isInitialized('staleDate') && null !== $data->getStaleDate()) {
            $dataArray['stale_date'] = $data->getStaleDate()?->format('Y-m-d\TH:i:sP');
        }
        if ($data->isInitialized('notification') && null !== $data->getNotification()) {
            $dataArray['notification'] = $this->normalizer->normalize($data->getNotification(), 'json', $context);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Braze\Model\MessagesLiveActivityUpdatePostBody::class => false];
    }
}
