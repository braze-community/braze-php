<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Normalizer;

use Braze\Runtime\Normalizer\CheckArray;
use Braze\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class MessagesScheduleCreatePostBodyMessagesNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Braze\Model\MessagesScheduleCreatePostBodyMessages::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Braze\Model\MessagesScheduleCreatePostBodyMessages::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Braze\Model\MessagesScheduleCreatePostBodyMessages();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('apple_push', $data)) {
            $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['apple_push'] as $key => $value) {
                $values[$key] = $value;
            }
            $object->setApplePush($values);
            unset($data['apple_push']);
        }
        if (\array_key_exists('android_push', $data)) {
            $values_1 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['android_push'] as $key_1 => $value_1) {
                $values_1[$key_1] = $value_1;
            }
            $object->setAndroidPush($values_1);
            unset($data['android_push']);
        }
        if (\array_key_exists('windows_push', $data)) {
            $values_2 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['windows_push'] as $key_2 => $value_2) {
                $values_2[$key_2] = $value_2;
            }
            $object->setWindowsPush($values_2);
            unset($data['windows_push']);
        }
        if (\array_key_exists('windows8_push', $data)) {
            $values_3 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['windows8_push'] as $key_3 => $value_3) {
                $values_3[$key_3] = $value_3;
            }
            $object->setWindows8Push($values_3);
            unset($data['windows8_push']);
        }
        if (\array_key_exists('kindle_push', $data)) {
            $values_4 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['kindle_push'] as $key_4 => $value_4) {
                $values_4[$key_4] = $value_4;
            }
            $object->setKindlePush($values_4);
            unset($data['kindle_push']);
        }
        if (\array_key_exists('web_push', $data)) {
            $values_5 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['web_push'] as $key_5 => $value_5) {
                $values_5[$key_5] = $value_5;
            }
            $object->setWebPush($values_5);
            unset($data['web_push']);
        }
        if (\array_key_exists('email', $data)) {
            $values_6 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['email'] as $key_6 => $value_6) {
                $values_6[$key_6] = $value_6;
            }
            $object->setEmail($values_6);
            unset($data['email']);
        }
        if (\array_key_exists('webhook', $data)) {
            $values_7 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['webhook'] as $key_7 => $value_7) {
                $values_7[$key_7] = $value_7;
            }
            $object->setWebhook($values_7);
            unset($data['webhook']);
        }
        if (\array_key_exists('content_card', $data)) {
            $values_8 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['content_card'] as $key_8 => $value_8) {
                $values_8[$key_8] = $value_8;
            }
            $object->setContentCard($values_8);
            unset($data['content_card']);
        }
        foreach ($data as $key_9 => $value_9) {
            if (preg_match('/.*/', (string) $key_9)) {
                $object[$key_9] = $value_9;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('applePush') && null !== $data->getApplePush()) {
            $values = [];
            foreach ($data->getApplePush() as $key => $value) {
                $values[$key] = $value;
            }
            $dataArray['apple_push'] = $values;
        }
        if ($data->isInitialized('androidPush') && null !== $data->getAndroidPush()) {
            $values_1 = [];
            foreach ($data->getAndroidPush() as $key_1 => $value_1) {
                $values_1[$key_1] = $value_1;
            }
            $dataArray['android_push'] = $values_1;
        }
        if ($data->isInitialized('windowsPush') && null !== $data->getWindowsPush()) {
            $values_2 = [];
            foreach ($data->getWindowsPush() as $key_2 => $value_2) {
                $values_2[$key_2] = $value_2;
            }
            $dataArray['windows_push'] = $values_2;
        }
        if ($data->isInitialized('windows8Push') && null !== $data->getWindows8Push()) {
            $values_3 = [];
            foreach ($data->getWindows8Push() as $key_3 => $value_3) {
                $values_3[$key_3] = $value_3;
            }
            $dataArray['windows8_push'] = $values_3;
        }
        if ($data->isInitialized('kindlePush') && null !== $data->getKindlePush()) {
            $values_4 = [];
            foreach ($data->getKindlePush() as $key_4 => $value_4) {
                $values_4[$key_4] = $value_4;
            }
            $dataArray['kindle_push'] = $values_4;
        }
        if ($data->isInitialized('webPush') && null !== $data->getWebPush()) {
            $values_5 = [];
            foreach ($data->getWebPush() as $key_5 => $value_5) {
                $values_5[$key_5] = $value_5;
            }
            $dataArray['web_push'] = $values_5;
        }
        if ($data->isInitialized('email') && null !== $data->getEmail()) {
            $values_6 = [];
            foreach ($data->getEmail() as $key_6 => $value_6) {
                $values_6[$key_6] = $value_6;
            }
            $dataArray['email'] = $values_6;
        }
        if ($data->isInitialized('webhook') && null !== $data->getWebhook()) {
            $values_7 = [];
            foreach ($data->getWebhook() as $key_7 => $value_7) {
                $values_7[$key_7] = $value_7;
            }
            $dataArray['webhook'] = $values_7;
        }
        if ($data->isInitialized('contentCard') && null !== $data->getContentCard()) {
            $values_8 = [];
            foreach ($data->getContentCard() as $key_8 => $value_8) {
                $values_8[$key_8] = $value_8;
            }
            $dataArray['content_card'] = $values_8;
        }
        foreach ($data as $key_9 => $value_9) {
            if (preg_match('/.*/', (string) $key_9)) {
                $dataArray[$key_9] = $value_9;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Braze\Model\MessagesScheduleCreatePostBodyMessages::class => false];
    }
}
