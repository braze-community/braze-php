<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Normalizer;

use Braze\Runtime\Normalizer\CheckArray;
use Braze\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class MessagesScheduleCreatePostBodyScheduleNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Braze\Model\MessagesScheduleCreatePostBodySchedule::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Braze\Model\MessagesScheduleCreatePostBodySchedule::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Braze\Model\MessagesScheduleCreatePostBodySchedule();
        if (\array_key_exists('in_local_time', $data) && \is_int($data['in_local_time'])) {
            $data['in_local_time'] = (bool) $data['in_local_time'];
        }
        if (\array_key_exists('at_optimal_time', $data) && \is_int($data['at_optimal_time'])) {
            $data['at_optimal_time'] = (bool) $data['at_optimal_time'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('time', $data)) {
            $object->setTime($data['time']);
            unset($data['time']);
        }
        if (\array_key_exists('in_local_time', $data)) {
            $object->setInLocalTime($data['in_local_time']);
            unset($data['in_local_time']);
        }
        if (\array_key_exists('at_optimal_time', $data)) {
            $object->setAtOptimalTime($data['at_optimal_time']);
            unset($data['at_optimal_time']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('time') && null !== $data->getTime()) {
            $dataArray['time'] = $data->getTime();
        }
        if ($data->isInitialized('inLocalTime') && null !== $data->getInLocalTime()) {
            $dataArray['in_local_time'] = $data->getInLocalTime();
        }
        if ($data->isInitialized('atOptimalTime') && null !== $data->getAtOptimalTime()) {
            $dataArray['at_optimal_time'] = $data->getAtOptimalTime();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Braze\Model\MessagesScheduleCreatePostBodySchedule::class => false];
    }
}
