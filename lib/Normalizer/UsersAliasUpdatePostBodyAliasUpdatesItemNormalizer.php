<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Normalizer;

use Braze\Runtime\Normalizer\CheckArray;
use Braze\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class UsersAliasUpdatePostBodyAliasUpdatesItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization($data, $type, $format = null, array $context = []): bool
    {
        return $type === 'Braze\\Model\\UsersAliasUpdatePostBodyAliasUpdatesItem';
    }

    public function supportsNormalization($data, $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === 'Braze\\Model\\UsersAliasUpdatePostBodyAliasUpdatesItem';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Braze\Model\UsersAliasUpdatePostBodyAliasUpdatesItem();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('alias_label', $data)) {
            $object->setAliasLabel($data['alias_label']);
            unset($data['alias_label']);
        }
        if (\array_key_exists('old_alias_name', $data)) {
            $object->setOldAliasName($data['old_alias_name']);
            unset($data['old_alias_name']);
        }
        if (\array_key_exists('new_alias_name', $data)) {
            $object->setNewAliasName($data['new_alias_name']);
            unset($data['new_alias_name']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        if ($object->isInitialized('aliasLabel') && null !== $object->getAliasLabel()) {
            $data['alias_label'] = $object->getAliasLabel();
        }
        if ($object->isInitialized('oldAliasName') && null !== $object->getOldAliasName()) {
            $data['old_alias_name'] = $object->getOldAliasName();
        }
        if ($object->isInitialized('newAliasName') && null !== $object->getNewAliasName()) {
            $data['new_alias_name'] = $object->getNewAliasName();
        }
        foreach ($object as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $data[$key] = $value;
            }
        }

        return $data;
    }

    public function getSupportedTypes(string $format = null): array
    {
        return ['Braze\\Model\\UsersAliasUpdatePostBodyAliasUpdatesItem' => false];
    }
}
