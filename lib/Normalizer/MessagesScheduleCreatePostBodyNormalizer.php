<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Normalizer;

use Braze\Runtime\Normalizer\CheckArray;
use Braze\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class MessagesScheduleCreatePostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Braze\Model\MessagesScheduleCreatePostBody::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Braze\Model\MessagesScheduleCreatePostBody::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Braze\Model\MessagesScheduleCreatePostBody();
        if (\array_key_exists('broadcast', $data) && \is_int($data['broadcast'])) {
            $data['broadcast'] = (bool) $data['broadcast'];
        }
        if (\array_key_exists('override_messaging_limits', $data) && \is_int($data['override_messaging_limits'])) {
            $data['override_messaging_limits'] = (bool) $data['override_messaging_limits'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('broadcast', $data)) {
            $object->setBroadcast($data['broadcast']);
            unset($data['broadcast']);
        }
        if (\array_key_exists('external_user_ids', $data)) {
            $values = [];
            foreach ($data['external_user_ids'] as $value) {
                $values[] = $value;
            }
            $object->setExternalUserIds($values);
            unset($data['external_user_ids']);
        }
        if (\array_key_exists('user_aliases', $data)) {
            $object->setUserAliases($this->denormalizer->denormalize($data['user_aliases'], \Braze\Model\MessagesScheduleCreatePostBodyUserAliases::class, 'json', $context));
            unset($data['user_aliases']);
        }
        if (\array_key_exists('segment_id', $data)) {
            $object->setSegmentId($data['segment_id']);
            unset($data['segment_id']);
        }
        if (\array_key_exists('audience', $data)) {
            $object->setAudience($this->denormalizer->denormalize($data['audience'], \Braze\Model\MessagesScheduleCreatePostBodyAudience::class, 'json', $context));
            unset($data['audience']);
        }
        if (\array_key_exists('campaign_id', $data)) {
            $object->setCampaignId($data['campaign_id']);
            unset($data['campaign_id']);
        }
        if (\array_key_exists('send_id', $data)) {
            $object->setSendId($data['send_id']);
            unset($data['send_id']);
        }
        if (\array_key_exists('override_messaging_limits', $data)) {
            $object->setOverrideMessagingLimits($data['override_messaging_limits']);
            unset($data['override_messaging_limits']);
        }
        if (\array_key_exists('recipient_subscription_state', $data)) {
            $object->setRecipientSubscriptionState($data['recipient_subscription_state']);
            unset($data['recipient_subscription_state']);
        }
        if (\array_key_exists('schedule', $data)) {
            $object->setSchedule($this->denormalizer->denormalize($data['schedule'], \Braze\Model\MessagesScheduleCreatePostBodySchedule::class, 'json', $context));
            unset($data['schedule']);
        }
        if (\array_key_exists('messages', $data)) {
            $object->setMessages($this->denormalizer->denormalize($data['messages'], \Braze\Model\MessagesScheduleCreatePostBodyMessages::class, 'json', $context));
            unset($data['messages']);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_1;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('broadcast') && null !== $data->getBroadcast()) {
            $dataArray['broadcast'] = $data->getBroadcast();
        }
        if ($data->isInitialized('externalUserIds') && null !== $data->getExternalUserIds()) {
            $values = [];
            foreach ($data->getExternalUserIds() as $value) {
                $values[] = $value;
            }
            $dataArray['external_user_ids'] = $values;
        }
        if ($data->isInitialized('userAliases') && null !== $data->getUserAliases()) {
            $dataArray['user_aliases'] = $this->normalizer->normalize($data->getUserAliases(), 'json', $context);
        }
        if ($data->isInitialized('segmentId') && null !== $data->getSegmentId()) {
            $dataArray['segment_id'] = $data->getSegmentId();
        }
        if ($data->isInitialized('audience') && null !== $data->getAudience()) {
            $dataArray['audience'] = $this->normalizer->normalize($data->getAudience(), 'json', $context);
        }
        if ($data->isInitialized('campaignId') && null !== $data->getCampaignId()) {
            $dataArray['campaign_id'] = $data->getCampaignId();
        }
        if ($data->isInitialized('sendId') && null !== $data->getSendId()) {
            $dataArray['send_id'] = $data->getSendId();
        }
        if ($data->isInitialized('overrideMessagingLimits') && null !== $data->getOverrideMessagingLimits()) {
            $dataArray['override_messaging_limits'] = $data->getOverrideMessagingLimits();
        }
        if ($data->isInitialized('recipientSubscriptionState') && null !== $data->getRecipientSubscriptionState()) {
            $dataArray['recipient_subscription_state'] = $data->getRecipientSubscriptionState();
        }
        if ($data->isInitialized('schedule') && null !== $data->getSchedule()) {
            $dataArray['schedule'] = $this->normalizer->normalize($data->getSchedule(), 'json', $context);
        }
        if ($data->isInitialized('messages') && null !== $data->getMessages()) {
            $dataArray['messages'] = $this->normalizer->normalize($data->getMessages(), 'json', $context);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_1;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Braze\Model\MessagesScheduleCreatePostBody::class => false];
    }
}
