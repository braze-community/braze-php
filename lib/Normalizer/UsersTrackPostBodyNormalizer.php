<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Normalizer;

use Braze\Runtime\Normalizer\CheckArray;
use Braze\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class UsersTrackPostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Braze\Model\UsersTrackPostBody::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Braze\Model\UsersTrackPostBody::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Braze\Model\UsersTrackPostBody();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('attributes', $data)) {
            $values = [];
            foreach ($data['attributes'] as $value) {
                $values_1 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
                foreach ($value as $key => $value_1) {
                    $values_1[$key] = $value_1;
                }
                $values[] = $values_1;
            }
            $object->setAttributes($values);
            unset($data['attributes']);
        }
        if (\array_key_exists('events', $data)) {
            $values_2 = [];
            foreach ($data['events'] as $value_2) {
                $values_3 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
                foreach ($value_2 as $key_1 => $value_3) {
                    $values_3[$key_1] = $value_3;
                }
                $values_2[] = $values_3;
            }
            $object->setEvents($values_2);
            unset($data['events']);
        }
        if (\array_key_exists('purchases', $data)) {
            $values_4 = [];
            foreach ($data['purchases'] as $value_4) {
                $values_5 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
                foreach ($value_4 as $key_2 => $value_5) {
                    $values_5[$key_2] = $value_5;
                }
                $values_4[] = $values_5;
            }
            $object->setPurchases($values_4);
            unset($data['purchases']);
        }
        foreach ($data as $key_3 => $value_6) {
            if (preg_match('/.*/', (string) $key_3)) {
                $object[$key_3] = $value_6;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('attributes') && null !== $data->getAttributes()) {
            $values = [];
            foreach ($data->getAttributes() as $value) {
                $values_1 = [];
                foreach ($value as $key => $value_1) {
                    $values_1[$key] = $value_1;
                }
                $values[] = $values_1;
            }
            $dataArray['attributes'] = $values;
        }
        if ($data->isInitialized('events') && null !== $data->getEvents()) {
            $values_2 = [];
            foreach ($data->getEvents() as $value_2) {
                $values_3 = [];
                foreach ($value_2 as $key_1 => $value_3) {
                    $values_3[$key_1] = $value_3;
                }
                $values_2[] = $values_3;
            }
            $dataArray['events'] = $values_2;
        }
        if ($data->isInitialized('purchases') && null !== $data->getPurchases()) {
            $values_4 = [];
            foreach ($data->getPurchases() as $value_4) {
                $values_5 = [];
                foreach ($value_4 as $key_2 => $value_5) {
                    $values_5[$key_2] = $value_5;
                }
                $values_4[] = $values_5;
            }
            $dataArray['purchases'] = $values_4;
        }
        foreach ($data as $key_3 => $value_6) {
            if (preg_match('/.*/', (string) $key_3)) {
                $dataArray[$key_3] = $value_6;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Braze\Model\UsersTrackPostBody::class => false];
    }
}
