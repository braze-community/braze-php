<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Braze\Normalizer;

use Braze\Runtime\Normalizer\CheckArray;
use Braze\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class UsersTrackPostBodyAttributesItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization($data, $type, $format = null, array $context = []): bool
    {
        return $type === 'Braze\\Model\\UsersTrackPostBodyAttributesItem';
    }

    public function supportsNormalization($data, $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === 'Braze\\Model\\UsersTrackPostBodyAttributesItem';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Braze\Model\UsersTrackPostBodyAttributesItem();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('external_id', $data)) {
            $object->setExternalId($data['external_id']);
            unset($data['external_id']);
        }
        if (\array_key_exists('string_attribute', $data)) {
            $object->setStringAttribute($data['string_attribute']);
            unset($data['string_attribute']);
        }
        if (\array_key_exists('boolean_attribute_1', $data)) {
            $object->setBooleanAttribute1($data['boolean_attribute_1']);
            unset($data['boolean_attribute_1']);
        }
        if (\array_key_exists('integer_attribute', $data)) {
            $object->setIntegerAttribute($data['integer_attribute']);
            unset($data['integer_attribute']);
        }
        if (\array_key_exists('array_attribute', $data)) {
            $values = [];
            foreach ($data['array_attribute'] as $value) {
                $values[] = $value;
            }
            $object->setArrayAttribute($values);
            unset($data['array_attribute']);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_1;
            }
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        if ($object->isInitialized('externalId') && null !== $object->getExternalId()) {
            $data['external_id'] = $object->getExternalId();
        }
        if ($object->isInitialized('stringAttribute') && null !== $object->getStringAttribute()) {
            $data['string_attribute'] = $object->getStringAttribute();
        }
        if ($object->isInitialized('booleanAttribute1') && null !== $object->getBooleanAttribute1()) {
            $data['boolean_attribute_1'] = $object->getBooleanAttribute1();
        }
        if ($object->isInitialized('integerAttribute') && null !== $object->getIntegerAttribute()) {
            $data['integer_attribute'] = $object->getIntegerAttribute();
        }
        if ($object->isInitialized('arrayAttribute') && null !== $object->getArrayAttribute()) {
            $values = [];
            foreach ($object->getArrayAttribute() as $value) {
                $values[] = $value;
            }
            $data['array_attribute'] = $values;
        }
        foreach ($object as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $data[$key] = $value_1;
            }
        }

        return $data;
    }

    public function getSupportedTypes(string $format = null): array
    {
        return ['Braze\\Model\\UsersTrackPostBodyAttributesItem' => false];
    }
}
